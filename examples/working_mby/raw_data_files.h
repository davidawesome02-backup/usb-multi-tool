#define DEFAULT_CONFIG_INI "[info]\n# only works with real disk raw images (most linux images come like this) (dd mode)\n#Please specify arguments in `data = value` with spaces, parsing will not work without them\n[image]\n# -- IMPORTANT CD DATA --\n# Cd will ignore block size, using 2048\n# Cd will use read only\ncd_image = 0\n#0 = fill in automaticly next update, and dont force resize\nblock_count = 0\n#incude name here, only applys to this file (disk images only, not iso format)\nname = image.iso\n#Possiable additions for block size\nbs = 512\n#Read only (1 or 0) (disables write caching)\nro = 0\n#Writes to a cache file instead of to the iso file\n#use to make read only while allowing system to write still\ncache_writes = 0\n\n[HID]\nhid_file = hid.txt\n\n\n[main]\n# below use type of hid or image\nselected_type = image\n"

#if help_files
    char help_file_keys_meanings[] = "No key pressed\0Keyboard Error Roll Over - used for all slots if too many keys are pressed (Phantom key)\0Keyboard POST Fail\0Keyboard Error Undefined\0Keyboard a and A\0Keyboard b and B\0Keyboard c and C\0Keyboard d and D\0Keyboard e and E\0Keyboard f and F\0Keyboard g and G\0Keyboard h and H\0Keyboard i and I\0Keyboard j and J\0Keyboard k and K\0Keyboard l and L\0Keyboard m and M\0Keyboard n and N\0Keyboard o and O\0Keyboard p and P\0Keyboard q and Q\0Keyboard r and R\0Keyboard s and S\0Keyboard t and T\0Keyboard u and U\0Keyboard v and V\0Keyboard w and W\0Keyboard x and X\0Keyboard y and Y\0Keyboard z and Z\0Keyboard 1 and !\0Keyboard 2 and @\0Keyboard 3 and #\0Keyboard 4 and $\0Keyboard 5 and %\0Keyboard 6 and ^\0Keyboard 7 and &\0Keyboard 8 and *\0Keyboard 9 and (\0Keyboard 0 and )\0Keyboard Return (ENTER)\0Keyboard ESCAPE\0Keyboard DELETE (Backspace)\0Keyboard Tab\0Keyboard Spacebar\0Keyboard - and _\0Keyboard = and +\0Keyboard [ and {\0Keyboard ] and }\0Keyboard  and |\0Keyboard Non-US # and ~\0Keyboard ; and :\0Keyboard \' and \"\0Keyboard ` and ~\0Keyboard , and <\0Keyboard . and >\0Keyboard / and ?\0Keyboard Caps Lock\0Keyboard F1\0Keyboard F2\0Keyboard F3\0Keyboard F4\0Keyboard F5\0Keyboard F6\0Keyboard F7\0Keyboard F8\0Keyboard F9\0Keyboard F10\0Keyboard F11\0Keyboard F12\0Keyboard Print Screen\0Keyboard Scroll Lock\0Keyboard Pause\0Keyboard Insert\0Keyboard Home\0Keyboard Page Up\0Keyboard Delete Forward\0Keyboard End\0Keyboard Page Down\0Keyboard Right Arrow\0Keyboard Left Arrow\0Keyboard Down Arrow\0Keyboard Up Arrow\0Keyboard Num Lock and Clear\0Keypad /\0Keypad *\0Keypad -\0Keypad +\0Keypad ENTER\0Keypad 1 and End\0Keypad 2 and Down Arrow\0Keypad 3 and PageDn\0Keypad 4 and Left Arrow\0Keypad 5\0Keypad 6 and Right Arrow\0Keypad 7 and Home\0Keypad 8 and Up Arrow\0Keypad 9 and Page Up\0Keypad 0 and Insert\0Keypad . and Delete\0Keyboard Non-US  and |\0Keyboard Application\0Keyboard Power\0Keypad =\0Keyboard F13\0Keyboard F14\0Keyboard F15\0Keyboard F16\0Keyboard F17\0Keyboard F18\0Keyboard F19\0Keyboard F20\0Keyboard F21\0Keyboard F22\0Keyboard F23\0Keyboard F24\0Keyboard Execute\0Keyboard Help\0Keyboard Menu\0Keyboard Select\0Keyboard Stop\0Keyboard Again\0Keyboard Undo\0Keyboard Cut\0Keyboard Copy\0Keyboard Paste\0Keyboard Find\0Keyboard Mute\0Keyboard Volume Up\0Keyboard Volume Down\0Keyboard Locking Caps Lock\0Keyboard Locking Num Lock\0Keyboard Locking Scroll Lock\0Keypad Comma\0Keypad Equal Sign\0Keyboard International1\0Keyboard International2\0Keyboard International3\0Keyboard International4\0Keyboard International5\0Keyboard International6\0Keyboard International7\0Keyboard International8\0Keyboard International9\0Keyboard LANG1\0Keyboard LANG2\0Keyboard LANG3\0Keyboard LANG4\0Keyboard LANG5\0Keyboard LANG6\0Keyboard LANG7\0Keyboard LANG8\0Keyboard LANG9\0Keyboard Alternate Erase\0Keyboard SysReq/Attention\0Keyboard Cancel\0Keyboard Clear\0Keyboard Prior\0Keyboard Return\0Keyboard Separator\0Keyboard Out\0Keyboard Oper\0Keyboard Clear/Again\0Keyboard CrSel/Props\0Keyboard ExSel\0\0\0\0\0\0\0\0\0\0\0\0Keypad 00\0Keypad 000\0Thousands Separator\0Decimal Separator\0Currency Unit\0Currency Sub-unit\0Keypad (\0Keypad )\0Keypad {\0Keypad }\0Keypad Tab\0Keypad Backspace\0Keypad A\0Keypad B\0Keypad C\0Keypad D\0Keypad E\0Keypad F\0Keypad XOR\0Keypad ^\0Keypad %\0Keypad <\0Keypad >\0Keypad &\0Keypad &&\0Keypad |\0Keypad ||\0Keypad :\0Keypad #\0Keypad Space\0Keypad @\0Keypad !\0Keypad Memory Store\0Keypad Memory Recall\0Keypad Memory Clear\0Keypad Memory Add\0Keypad Memory Subtract\0Keypad Memory Multiply\0Keypad Memory Divide\0Keypad +/-\0Keypad Clear\0Keypad Clear Entry\0Keypad Binary\0Keypad Octal\0Keypad Decimal\0Keypad Hexadecimal\0\0\0Keyboard Left Control\0Keyboard Left Shift\0Keyboard Left Alt\0Keyboard Left GUI\0Keyboard Right Control\0Keyboard Right Shift\0Keyboard Right Alt\0Keyboard Right GUI\0MEDIA_PLAYPAUSE\0MEDIA_STOPCD\0MEDIA_PREVIOUSSONG\0MEDIA_NEXTSONG\0MEDIA_EJECTCD\0MEDIA_VOLUMEUP\0MEDIA_VOLUMEDOWN\0MEDIA_MUTE\0MEDIA_WWW\0MEDIA_BACK\0MEDIA_FORWARD\0MEDIA_STOP\0MEDIA_FIND\0MEDIA_SCROLLUP\0MEDIA_SCROLLDOWN\0MEDIA_EDIT\0MEDIA_SLEEP\0MEDIA_COFFEE\0MEDIA_REFRESH\0MEDIA_CAL\0\0\0\0";
    char help_file_uart_console[] = "<head> <title>Uart console</title> <style>code{font-family:'Lucida Console',monospace;background-color:#000;color:#fff;white-space-collapse:preserve;font-size:1em;line-height:1.5em;padding:.25em 0}.code_background{background-color:#000}.top_part{margin:10px}body,html{margin:0;padding:0}</style> </head> <body> <div class=\"top_part\"> <h1>Basic usb uart console</h1> <button onclick=\"o()\" id=\"connect_button\">Connect</button> </div> <div class=\"code_background\"> <code id=\"console_output\"></code> </div> <script>function e(){connected=!0,document.getElementById(\"connect_button\").innerHTML=\"clear\",code_block.textContent=\"-- connected --\"}function r(){return span=document.createElement(\"span\"),span.style.color=last_span[1][0],span.style.backgroundColor=last_span[1][1],last_span[0]=span,code_block.appendChild(span),span}function n(e){null==last_span[0]&&r(),e.read().then((({done:r,value:o})=>{for(console.log(o),at_bottom=document.body.scrollHeight-visualViewport.height-window.scrollY<5,current_text_buffer=text_decoder.decode(o),i=0;i<current_text_buffer.length;i++)current_char=current_text_buffer[i],0!=current_parse_expression_buffer.length||\"\\x1b\"==current_char?(current_parse_expression_buffer+=current_char,\"\\x1b\"==current_char||\"[\"==current_char||\";\"==current_char||current_char-0>=0||(t(),console.log(current_parse_expression_buffer,current_parse_expression_buffer.length,current_char),current_parse_expression_buffer=\"\")):last_span[0].textContent+=current_char;at_bottom&&setTimeout((()=>{document.body.scroll({behavior:\"instant\",top:document.body.scrollHeight+10})}),10),n(e)}))}function t(){if(current_parse_expression_buffer.endsWith(\"m\")){current_parse_expression_buffer=current_parse_expression_buffer.slice(2,-1),expression=current_parse_expression_buffer.split(\";\");for(let e in expression)expression[e]=expression[e]-0;1==expression.length&&(expression[0]>=90&&(expression[0]-=60),expression[0]<50&&(last_span[1][Math.floor((expression[0]-30)/10)]=[\"black\",\"red\",\"green\",\"yellow\",\"blue\",\"magenta\",\"cyan\",\"white\",\"\",\"\"][expression[0]%10]),39!=expression[0]&&0!=expression[0]||(last_span[1][0]=\"white\"),49!=expression[0]&&0!=expression[0]||(last_span[0][0]=\"black\")),5==expression.length&&(last_span[1][(expression[0]-38)/10]=`rgb(${expression[2]},${expression[3]},${expression[4]})`),r()}}function o(){connected?code_block.textContent=\"-- Cleared -- \\n\":navigator.serial.requestPort().then((r=>{text_decoder=new TextDecoder,r.open({baudRate:2e6}).then((()=>{e(),port_reader=r.readable.getReader(),n(port_reader)}))}))}connected=!1,current_parse_expression_buffer=\"\",code_block=document.getElementById(\"console_output\"),last_span=[null,[\"white\",\"black\"]],navigator.serial.getPorts().then((r=>{for(port_index in console.log(r),r)port=r[port_index],text_decoder=new TextDecoder,port.open({baudRate:2e6}).then((()=>{e(),port_reader=port.readable.getReader(),n(port_reader)}))})); </script><!--";


    char help_file_commands[] = "commands:\nhi - hid init\nhd - hid disable\nwu - wait usb connection\ngs - general sleep      -   <ms>\ngj - general jump       -   <delta_lines>\nls - led set            -   <red> <green> <blue> // All are eithor 0 or 1, use 1 for on, 0 for off\nks - keyboard string    -   <modifiers> <resend_count> <string>\nki - keyboard input     -   <type> <resend_count> <modifiers> [data]{x6} // Type is 0 for hid codes and 1 for ascii characters as data\nmi - mouse input        -   <x> <y> <scroll> <buttons> // Primary, Secondary, Tertiary  :  Left, right, middle, ETC\ncj - conditional jump   -   <delta_lines>";
#endif
//https://www.digitalocean.com/community/tools/minify
//https://kangax.github.io/html-minifier/